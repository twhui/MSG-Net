# MSG-Net (published in ECCV 2016)                                          
# Copyright (c) 2016 Tak-Wai Hui.  All rights reserved. 
#
# This software is licensed under the terms of the LiteFlowNet licence
# which allows for non-commercial use only unless a prior arrangement
# has been made with the author (Tak-Wai Hui), the full terms of which 
# are made available in the LICENSE file.

name: "MSGNet_x2"

input: "data-Y"
input_dim: 1
input_dim: 1
input_dim: 39
input_dim: 39

input: "data-D"
input_dim: 1
input_dim: 1
input_dim: 20
input_dim: 20

layer {
  name: "conv1-Y"
  type: "Convolution"
  bottom: "data-Y"
  top: "conv1-Y"
  convolution_param {
    num_output: 49
    kernel_size: 7
    stride: 1
    pad: 3
  }
}

layer {
  name: "prelu1-Y"
  type: "PReLU"
  bottom: "conv1-Y"
  top: "conv1-Y"
}

layer {
  name: "conv2-Y"
  type: "Convolution"
  bottom: "conv1-Y"
  top: "conv2-Y"
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 1
    pad: 2
  }
}

layer {
  name: "prelu2-Y"
  type: "PReLU"
  bottom: "conv2-Y"
  top: "conv2-Y"
}

layer {
  name: "conv1-D"
  type: "Convolution"
  bottom: "data-D"
  top: "conv1-D"
  convolution_param {
    num_output: 64
    kernel_size: 5
    stride: 1
    pad: 2
  }
}

layer {
  name: "prelu1-D"
  type: "PReLU"
  bottom: "conv1-D"
  top: "conv1-D"
}

layer {
  name: "deconv2-D"
  type: "Deconvolution"
  bottom: "conv1-D"
  top: "deconv2-D"
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 2
    pad: 2
  }
}

layer {
  name: "prelu2-D"
  type: "PReLU"
  bottom: "deconv2-D"
  top: "deconv2-D"
}

layer {
  name: "concat2"
  bottom: "conv2-Y"
  bottom: "deconv2-D"
  top: "concat2"
  type: "Concat"
  concat_param {
    axis: 1
  }
}

layer {
  name: "conv2a"
  type: "Convolution"
  bottom: "concat2"
  top: "conv2a"
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 1
    pad: 2
  }
}

layer {
  name: "prelu2a"
  type: "PReLU"
  bottom: "conv2a"
  top: "conv2a"
}

layer {
  name: "conv2b"
  type: "Convolution"
  bottom: "conv2a"
  top: "conv2b"
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 1
    pad: 2
  }
}

layer {
  name: "prelu2b"
  type: "PReLU"
  bottom: "conv2b"
  top: "conv2b"
}

layer {
  name: "conv2c"
  type: "Convolution"
  bottom: "conv2b"
  top: "conv2c"
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 1
    pad: 2
  }
}

layer {
  name: "prelu2c"
  type: "PReLU"
  bottom: "conv2c"
  top: "conv2c"
}

layer {
  name: "conv3"
  type: "Convolution"
  bottom: "conv2c"
  top: "conv3"
  convolution_param {
    num_output: 1
    kernel_size: 5
    stride: 1
    pad: 2
  }
}
